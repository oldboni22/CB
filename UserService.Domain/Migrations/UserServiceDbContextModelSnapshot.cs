// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using UserService.Domain.Context;

#nullable disable

namespace UserService.Domain.Migrations
{
    [DbContext(typeof(UserServiceDbContext))]
    partial class UserServiceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("UserService.Domain.Data.Models.ManyToMany.StudentCourse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentCourseRelations");
                });

            modelBuilder.Entity("UserService.Domain.Data.Models.ManyToMany.TeacherGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeacherGroupRelations");
                });

            modelBuilder.Entity("UserService.Domain.Data.Models.RoleData.RoleData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RoleType")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("UserRoles");

                    b.HasDiscriminator<string>("RoleType").HasValue("RoleData");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("UserService.Domain.Data.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<Guid>("RoleDataId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("RoleDataId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("UserService.Domain.Data.Models.RoleData.StudentRoleData", b =>
                {
                    b.HasBaseType("UserService.Domain.Data.Models.RoleData.RoleData");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("UserService.Domain.Data.Models.RoleData.TeacherRoleData", b =>
                {
                    b.HasBaseType("UserService.Domain.Data.Models.RoleData.RoleData");

                    b.HasDiscriminator().HasValue("Teacher");
                });

            modelBuilder.Entity("UserService.Domain.Data.Models.ManyToMany.StudentCourse", b =>
                {
                    b.HasOne("UserService.Domain.Data.Models.RoleData.StudentRoleData", "StudentData")
                        .WithMany("StudentCourseRelations")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudentData");
                });

            modelBuilder.Entity("UserService.Domain.Data.Models.ManyToMany.TeacherGroup", b =>
                {
                    b.HasOne("UserService.Domain.Data.Models.RoleData.TeacherRoleData", "TeacherData")
                        .WithMany("TeacherGroupRelations")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TeacherData");
                });

            modelBuilder.Entity("UserService.Domain.Data.Models.User", b =>
                {
                    b.HasOne("UserService.Domain.Data.Models.RoleData.RoleData", "RoleData")
                        .WithOne()
                        .HasForeignKey("UserService.Domain.Data.Models.User", "RoleDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoleData");
                });

            modelBuilder.Entity("UserService.Domain.Data.Models.RoleData.StudentRoleData", b =>
                {
                    b.Navigation("StudentCourseRelations");
                });

            modelBuilder.Entity("UserService.Domain.Data.Models.RoleData.TeacherRoleData", b =>
                {
                    b.Navigation("TeacherGroupRelations");
                });
#pragma warning restore 612, 618
        }
    }
}
